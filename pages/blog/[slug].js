import Head from "next/head";
import { useRouter } from "next/router";
import Page from "../../components/Page";
import BlockContent from "@sanity/block-content-to-react";
import sanity, { urlFor } from "../../lib/sanity";

const postQuery = `*[_type == "post"]{ slug }`;
const singlePostQuery = `*[_type == "post" && slug.current == $slug][0]`;

export default function BlogPost({ post, slug }) {
  const {
    body,
    categories,
    mainImage,
    metaDescription,
    publishedAt,
    title,
    pageTitle,
  } = post;
  return (
    <Page>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content={metaDescription} />
        <link
          rel="canonical"
          href={`https://floodandfiresolutions.com/${slug}`}
        />
        import Head from "next/head";
        <script
          dangerouslySetInnerHTML={{
            __html: `<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
{
  "@context": "http://schema.org",
  "@type": "LocalBusiness",
  "name": "Flood & Fire Solutions",
  "telephone": "(208) 521-9741"
}
</script>`,
          }}
        />
      </Head>
      <section className="blog-banner">
        {/* <h1>{title}</h1> */}
        {/* <span>{publishedAt}</span> */}
        <img src={urlFor(mainImage)} alt={title} />
      </section>
      <section className="format-blog">
        <BlockContent projectId="1xuoiy22" dataset="production" blocks={body} />
      </section>
    </Page>
  );
}

// BlogPost.getInitialProps = async (context) => {
//   // It's important to default the slug so that it doesn't return "undefined"
//   const { slug = "" } = context.query;
//   return {
//     post: await sanity.fetch(singlePostQuery, {
//       slug,
//     }),
//   };
// };

export async function getStaticPaths() {
  const posts = await sanity.fetch(postQuery);
  const paths = posts.map((post) => ({
    params: { slug: post.slug.current },
  }));
  return { paths, fallback: false };
}

export async function getStaticProps({ params }) {
  const post = await sanity.fetch(singlePostQuery, {
    slug: params.slug,
  });
  return { props: { post, slug: params.slug } };
}
